// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// read_csr
S4 read_csr(const std::string& path);
RcppExport SEXP _RCUDANLP_read_csr(SEXP pathSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type path(pathSEXP);
    rcpp_result_gen = Rcpp::wrap(read_csr(path));
    return rcpp_result_gen;
END_RCPP
}
// normalize_csr
S4 normalize_csr(S4 dtm);
RcppExport SEXP _RCUDANLP_normalize_csr(SEXP dtmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< S4 >::type dtm(dtmSEXP);
    rcpp_result_gen = Rcpp::wrap(normalize_csr(dtm));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_RCUDANLP_read_csr", (DL_FUNC) &_RCUDANLP_read_csr, 1},
    {"_RCUDANLP_normalize_csr", (DL_FUNC) &_RCUDANLP_normalize_csr, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_RCUDANLP(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
